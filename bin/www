#!/usr/bin/env node

const app = require('../app');
const http = require('http');
const config = require('../config');

const port = config.port;
app.set('port', port);

const server = http.createServer(app);

// Server configuration
server.timeout = config.timeout;
server.keepAliveTimeout = config.keepAliveTimeout;
server.headersTimeout = config.headersTimeout;

// Track connections
const connections = new Set();

server.on('connection', (conn) => {
  connections.add(conn);
  conn.on('close', () => connections.delete(conn));
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function gracefulShutdown(signal) {
  console.log(`\n${signal} received. Graceful shutdown...`);
  console.log(`Active connections: ${connections.size}`);
  
  server.close(() => {
    console.log('Server closed');
    process.exit(0);
  });

  connections.forEach((conn) => {
    if (!conn.destroyed) conn.end();
  });

  setTimeout(() => {
    console.error('Forced shutdown');
    connections.forEach((conn) => {
      if (!conn.destroyed) conn.destroy();
    });
    process.exit(1);
  }, 10000);
}

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  gracefulShutdown('uncaughtException');
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection:', promise, 'reason:', reason);
  gracefulShutdown('unhandledRejection');
});

function onError(error) {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  
  console.log('\npb-math-service started!');
  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
  console.log(`✓ Listening on ${bind}`);
  console.log(`✓ Environment: ${config.nodeEnv}`);
  console.log(`✓ Process: ${process.pid}`);
  console.log(`✓ Node: ${process.version}`);
  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
  console.log('\nEndpoints:');
  console.log(`  GET  http://localhost:${port}/latex`);
  console.log(`  GET  http://localhost:${port}/speechtext`);
  console.log(`  GET  http://localhost:${port}/cache-stats`);
  console.log('\n');
}